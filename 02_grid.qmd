---
title: "2 - Create Grids"
cache: true
---
  
## Create hex grid

We want

- Small enough grid size to detect relevant patterns
- Large enough to smooth over eBird spatial/temporal sampling issues
- Grid size similar to breeding territory size ~ 12ha --> Too small
- Try 10x10km or 20x20km

We also want

- The grid areas to be roughly equivalent (i.e. we need the spatial grid to be
create with an equal-area projection)
- So we use the BC Albers projection (CRS 3005) already implemented in `02_grid`


**To see an image more closely, right-click and select "Open Image in new Tab" (or similar)**

## Setup

```{r}
#| message: false
library(tidyverse)
library(sf)
library(units)
library(patchwork)
source("00_functions.R")

base_map <- read_rds("Data/Datasets/base_map.rds")
bcr <- read_rds("Data/Datasets/bcr_map.rds")
bc <- read_rds("Data/Datasets/bc_map.rds")
```

## Create grids

- We want grids with dimensions of 10x10 or 20x20 km.
- 10x10 = 100 km2; 20x20 = 400 km2
- This gives 10,000 or 40,000 hectares

```{r}
as_units(c(10, 20)^2, "km2") |>
  set_units("ha")
```

Using functions from `00_functions.R`...

First we'll create the larger grid (20x20km)

```{r}
grid_20 <- bcr |>                   # Starting area to make grid over
  make_grid(size = 20 * 1000) |>    # 20km in meters
  mutate(grid_id = 1:n(),
         area_ha = 40000)           # reminder (20x20km = 400km2 = 40,000 ha)
```

And now we'll split this grid into to the smaller 10x10 km grid

```{r}
grid_10 <- grid_filter(grid_20, bcr, size = 10 * 1000) |> # 10km in meters
  bind_rows() |>
  mutate(grid_id = 1:n(),
         area_ha = 10 * 10 * 100)  # reminder (10x10km = 100km2 = 10,000 ha)
```

## Mark BCRs and BC

Mark which grid cells belong to BC and which belong to a specific BCR. 
Takes the BCR or province status with the largest overlap.
We'll also remove any grids that don't overlap a BCR (leftover from creating them).
```{r}
grid_10 <- grid_10 |>
  st_join(bcr, largest = TRUE) |>
  st_join(bc, largest = TRUE) |>
  filter(!is.na(bcr)) |>
  mutate(bc = replace_na(bc, FALSE))

grid_20 <- grid_20 |>
  st_join(bcr, largest = TRUE) |>
  st_join(bc, largest = TRUE) |>
  filter(!is.na(bcr)) |>
  mutate(bc = replace_na(bc, FALSE))
```

Check that all grids have been assigned to a single BCR/province (should see
no grids with more than one entry)
```{r}
st_drop_geometry(grid_20) |>
  count(grid_id) |>
  filter(n > 1)

st_drop_geometry(grid_10) |>
  count(grid_id) |>
  filter(n > 1)
```

Finally we'll update the numbering

```{r}
grid_10 <- mutate(grid_10, grid_id = 1:n())
grid_20 <- mutate(grid_20, grid_id = 1:n())
```

## Double check

20x20km grid
```{r}
ggplot() +
  geom_sf(data = base_map) +
  geom_sf(data = bcr, aes(fill = bcr), show.legend = FALSE) +
  geom_sf(data = grid_20, fill = NA) +
  scale_fill_viridis_d()
```
    
    
10x10km grid showing a subsection

- dotted grey grid are 10x10
- solid grid are 20x20

```{r}
ggplot() +
  geom_sf(data = base_map) +
  geom_sf(data = bcr, aes(fill = bcr), show.legend = FALSE) +
  geom_sf(data = grid_10, fill = "black", alpha = 0.2, linetype = "dotted") +
  geom_sf(data = grid_20, fill = NA, colour = "grey30") +
  coord_sf(crs = 4326, xlim = c(-130, -126.5), ylim = c(56.5, 57.5)) + # Zoom
  scale_fill_viridis_d()
```


## Save grids
```{r}
write_rds(grid_10, "Data/Datasets/grid_10km.rds")
write_rds(grid_20, "Data/Datasets/grid_20km.rds")
```

## Session Info
```{r}
sessioninfo::session_info()
```